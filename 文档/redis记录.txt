完全基于内存
数据结构简单
单线程
多路I/O复用模型，非阻塞io

redis:
	scan 0 MATCH *a* COUNT 10
	monitor
	keys a*


	rdb: 备份内存中的数据到二进制文件，恢复速度快
		save   //阻塞,写rdb快照
		bgsave //不阻塞,写rdb快照
		//写rdb配置,触发机制
		save 300 10 300秒内有10个key变化就写rdb文件
		优势：
			1、RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复
			2、生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。
			3、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。
		劣势：
			1、快照持久化期间修改的数据不会被保存，可能丢失数据。
	aof: 记录执行的命令
		bgrewriteaof //AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。为了压缩aof的持久化文件。redis提供了bgrewriteaof命令。将内存中的数据以命令的方式保存到临时文件中，同时会fork出一条新进程来将文件重写。

		触发机制：1、always，每修改同步 2、everysec，每秒同步，3、no：从不
		优势：
			1、通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据
			2、AOF日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。
			3、AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。
			4、AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复
		劣势：
			1、对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大
			2、AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的
			3、以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来

	事务：
		watch key  //乐观锁，记录当前版本，提交时版本加1，版本小于等于服务器版本时事务提交失败
		multi  //watch不能在multi之后执行
		set key new-value  //QUEUED
		exec  //失败返回nil

		问题：redis保证事务中的命令连续执行，但是如果其中一条命令执行失败，事务并不回滚。
			1) (error) ERR value is not an integer or out of range
			2) (integer) 1

	基本类型：
		string:
			1、string类型是Redis最基本的数据类型，一个键最大能存储512MB
			2、二进安全
			3、sds
				struct __attribute__ ((__packed__)) sdshdr5 {
				    unsigned char flags; /* 3 lsb of type, and 5 msb of string length */
				    char buf[];
				};
				struct __attribute__ ((__packed__)) sdshdr8 {
				    uint8_t len; /* used */
				    uint8_t alloc; /* excluding the header and null terminator */
				    unsigned char flags; /* 3 lsb of type, 5 unused bits */
				    char buf[];
				};
		Hash:
			1、散列
			2、rehash
		List:
			双向链表
		Set: 集合，通过哈希表实现
			sadd name value
			smembers name    //取所有
			srem name value //移除value
			scard name //返回数量
			srandmember name  //随机取一个返回
			spop name //随机取一个，并删除
			sismember name value //是否在集合中
			sscan name 0 Match test*
				1) "0"
				2) 1) "test3"
				   2) "test1"
				   3) "test2"
		zset: 有序集合 通过score（double）从小到大排序
			zadd name score value
			zrem name value
			zcard name
			zcount name min max  //返回指定key对应的有序集合中，分值在min~max之间的元素个数
			zrank name value
			zscore name value //返回分值

	查看redis信息：
		info clients //连接数

	RESP:
		For Simple Strings the first byte of the reply is "+" 回复For Errors the first byte of the reply is "-" 错误For Integers the first byte of the reply is ":" 整数For Bulk Strings the first byte of the reply is "$" 字符串For Arrays the first byte of the reply is "*" 数组
	Twemproxy
	redis-cluster集群: Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。

	分布式锁： setnx key value

    内存淘汰策略：maxmemory-policy
        全局的键空间选择性移除
            noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。默认配置
            allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）
            allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。
        设置过期时间的键空间选择性移除
            volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。
            volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。
            volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。
     FIFO 淘汰最早数据、LRU 剔除最近最少使用、和 LFU 剔除最近使用频率最低的
ls
    过期策略通常有以下三种：
        定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。
        惰性过期(redis)：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。
        定期过期(redis)：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。

